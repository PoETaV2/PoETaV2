"""

"""
import os
import re
import numpy as np
import pandas as pd
from sklearn.metrics import f1_score
from lm_eval.base import rf, PromptSelectionTask
from ..metrics import mean
from datasets import load_dataset
import collections

_CITATION = """

"""

_manual_examples=[

]

class StoryClozePT(PromptSelectionTask):
    VERSION = 0
    DATASET_PATH = "portuguese-benchmark-datasets/story_cloze_pt"
    DATASET_NAME = None

    manual_examples = _manual_examples

    NUM_CLASSES = 2

    def download(self, data_dir=None, cache_dir=None, download_mode=None):
        """ Dowloading the dataset requires the use of an API key. To use the 
        dataset for academic purpose, please contact the corresponding author 
        Henrico Brum. The dataset is originally in TSV format, and comes with 
        a parsing code that converts to a JSON file.
        """
        dataset = load_dataset(self.DATASET_PATH)
        

        self.dataset = dataset

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return False

    def has_test_docs(self):
        return True

    def training_docs(self):
        return self.dataset["train"]
    
    def test_docs(self):
        return self.dataset["eval"]

    def doc_to_text(self, doc):
        return f"""Passagem 1: {doc["input_sentence_1"]}\nPassagem 2: {doc["input_sentence_2"]}\nPassagem 3: {doc["input_sentence_3"]}\nPassagem 4: {doc["input_sentence_4"]}\nDesfecho 1: {doc["sentence_quiz1"]}\nDesfecho 2: {doc["sentence_quiz2"]}\nResposta:"""

    def doc_to_target(self, doc):
        answer= str(doc["answer_right_ending"])
        return " " + answer

    def construct_requests(self, doc, ctx):
        """ Uses RequestFactory to construct Requests and returns an iterable of 
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural 
            language description, as well as the few shot examples, and the question
            part of the document for `doc`. 
        """
        ll_one, _ = rf.loglikelihood(ctx, " 1") 
        ll_two, _ = rf.loglikelihood(ctx, " 2") 
        return ll_one, ll_two
    
    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a 
        dict where keys are the names of submetrics and values are the values of 
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        gold = doc["answer_right_ending"] - 1
        pred = np.argmax(results)

        return {
            "acc": (pred == gold),
            "f1-macro": (pred, gold),
            "f1-weighted": (pred, gold),
            "unknown_pred": False,
        }

    @classmethod
    def macro_f1(cls, items):
        preds, golds = zip(*items)
        preds = np.array(preds)
        golds = np.array(golds)
        label_set = set(golds)
        macro_f1 = f1_score(golds, preds, average='macro', 
                        labels=list(label_set))
        return macro_f1 * 100.0

    @classmethod
    def weighted_f1(cls, items):
        preds, golds = zip(*items)
        preds = np.array(preds)
        golds = np.array(golds)
        label_set = set(golds)
        weighted_f1 = f1_score(golds, preds, average='weighted', 
                        labels=list(label_set))
        return weighted_f1 * 100.0

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are 
            functions that aggregate a list of metrics
        """
        return {
            "acc": mean,
            "f1-macro": self.macro_f1,
            "f1-weighted": self.weighted_f1,
        }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are 
            whether a higher value of the submetric is better
        """
        return {
            "acc": True,
            "f1-macro": True,
            "f1-weighted": True,
            "unknown_pred": False,
        }


class StoryClozePT_Greedy(StoryClozePT):
    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.
        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        continuation = rf.greedy_until(ctx, ['\n'])
        return continuation

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document
        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        gold = self.doc_to_target(doc).strip().lower()
        pred = results[0].strip().lower()
        
        regex_pred= re.search(r'(1|2)', pred)
        unknown_pred= False
        if regex_pred:
            regex_pred= regex_pred.group(1)
        else:
            regex_pred= "unknown"
            unknown_pred= True
        
        
        debug_info={
            "regex_pred": regex_pred,
            "unknown_pred": unknown_pred,
            "gold": gold,
            "pred": pred,
        }
        

        return {
            "acc": (pred == gold),
            "f1-macro": (pred, gold),
            "f1-weighted": (pred, gold),
            "unknown_pred": unknown_pred,
            "debug_info": debug_info,
        }
    